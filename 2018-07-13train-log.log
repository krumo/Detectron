INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.0169689655304 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [5/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [8/64]
INFO loader.py: 234:   [10/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [16/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [20/64]
INFO loader.py: 234:   [20/64]
INFO loader.py: 234:   [21/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [24/64]
INFO loader.py: 234:   [25/64]
INFO loader.py: 234:   [25/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [30/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [36/64]
INFO loader.py: 234:   [36/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [40/64]
INFO loader.py: 234:   [41/64]
INFO loader.py: 234:   [42/64]
INFO loader.py: 234:   [42/64]
INFO loader.py: 234:   [42/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [46/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [50/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [53/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [56/64]
INFO loader.py: 234:   [57/64]
INFO loader.py: 234:   [57/64]
INFO loader.py: 234:   [58/64]
INFO loader.py: 234:   [58/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [62/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 212: Printing model: generalized_rcnn
INFO net.py: 249: data                        : (2, 3, 500, 1000)    => conv1                       : (2, 64, 250, 500)    ------- (op: Conv)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: AffineChannel)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: Relu)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => pool1                       : (2, 64, 125, 250)    ------- (op: MaxPool)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch2c             : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch1              : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch1              : (2, 256, 125, 250)   => res2_0_branch1_bn           : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch1_bn           : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_1_branch2c             : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_2_branch2c             : (2, 256, 125, 250)   => res2_2_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: StopGradient)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2c             : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch1              : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch1              : (2, 512, 63, 125)    => res3_0_branch1_bn           : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch1_bn           : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2c             : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2c             : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2c             : (2, 512, 63, 125)    => res3_3_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch2c             : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch1              : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch1              : (2, 1024, 32, 63)    => res4_0_branch1_bn           : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch1_bn           : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_1_branch2c             : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_2_branch2c             : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_3_branch2c             : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_4_branch2c             : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_5_branch2c             : (2, 1024, 32, 63)    => res4_5_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_cls_logits              : (2, 9, 32, 63)       ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_bbox_pred               : (2, 36, 32, 63)      ------- (op: Conv)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_cls_probs               : (2, 9, 32, 63)       ------- (op: Sigmoid)
INFO net.py: 249: rpn_cls_probs               : (2, 9, 32, 63)       => rpn_rois                    : (4000, 5)            ------- (op: Python:GenerateProposalsOp:rpn_cls_probs,rpn_bbox_pred,im_info)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_rois                    : (4000, 5)            ------|
INFO net.py: 249: im_info                     : (2, 3)               => rpn_rois                    : (4000, 5)            ------|
INFO net.py: 249: rpn_rois                    : (4000, 5)            => rois                        : (512, 5)             ------- (op: Python:GenerateProposalLabelsOp:rpn_rois,roidb,im_info,is_source)
INFO net.py: 249: roidb                       : (158464,)            => rois                        : (512, 5)             ------|
INFO net.py: 249: im_info                     : (2, 3)               => rois                        : (512, 5)             ------|
INFO net.py: 249: is_source                   : (2,)                 => rois                        : (512, 5)             ------|
INFO net.py: 249: rpn_labels_int32_wide       : (2, 9, 84, 84)       => rpn_labels_int32            : (2, 9, 32, 63)       ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_labels_int32            : (2, 9, 32, 63)       ------|
INFO net.py: 249: rpn_bbox_targets_wide       : (2, 36, 84, 84)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_inside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_outside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: rpn_labels_int32            : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------|
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: rpn_bbox_targets            : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_inside_weights     : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_outside_weights    : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => pool5                       : (512, 1024, 14, 14)  ------- (op: RoIAlign)
INFO net.py: 249: rois                        : (512, 5)             => pool5                       : (512, 1024, 14, 14)  ------|
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch2c             : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch1              : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch1              : (512, 2048, 7, 7)    => res5_0_branch1_bn           : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch1_bn           : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_1_branch2c             : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_2_branch2c             : (512, 2048, 7, 7)    => res5_2_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_pool                   : (512, 2048, 1, 1)    ------- (op: AveragePool)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => cls_score                   : (512, 9)             ------- (op: FC)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => bbox_pred                   : (512, 36)            ------- (op: FC)
INFO net.py: 249: cls_score                   : (512, 9)             => cls_prob                    : (512, 9)             ------- (op: SoftmaxWithLoss)
INFO net.py: 249: labels_int32                : (512,)               => cls_prob                    : (512, 9)             ------|
INFO net.py: 249: bbox_pred                   : (512, 36)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: bbox_targets                : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_inside_weights         : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_outside_weights        : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: cls_prob                    : (512, 9)             => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 249: labels_int32                : (512,)               => accuracy_cls                : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => da_grl                      : (2, 1024, 32, 63)    ------- (op: NegateGradient)
INFO net.py: 249: da_grl                      : (2, 1024, 32, 63)    => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Conv)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Relu)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_2                   : (2, 2, 36, 67)       ------- (op: Conv)
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => loss_da                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: da_label                    : (2, 2, 36, 67)       => loss_da                     : ()                   ------|
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => dc_grl                      : (512, 2048, 1, 1)    ------- (op: NegateGradient)
INFO net.py: 249: dc_grl                      : (512, 2048, 1, 1)    => dc_ip1                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip1                      : (512, 1024)          => dc_relu_1                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_1                   : (512, 1024)          => da_drop_1                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_1                   : (512, 1024)          => dc_ip2                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip2                      : (512, 1024)          => dc_relu_2                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_2                   : (512, 1024)          => da_drop_2                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_2                   : (512, 1024)          => dc_ip3                      : (512, 1)             ------- (op: FC)
INFO net.py: 249: dc_ip3                      : (512, 1)             => loss_dc                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: dc_label                    : (512,)               => loss_dc                     : ()                   ------|
INFO net.py: 253: End of model: generalized_rcnn
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.375000, "eta": "10 days, 9:21:11", "iter": 0, "loss": 4.128469, "loss_bbox": 0.216196, "loss_cls": 1.955256, "loss_da": 0.076629, "loss_dc": 0.070144, "loss_rpn_bbox": 1.075553, "loss_rpn_cls": 0.734691, "lr": 0.001000, "mb_qsize": 64, "mem": 6366, "time": 12.823873}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.876953, "eta": "1 day, 9:08:38", "iter": 20, "loss": 1.913082, "loss_bbox": 0.092119, "loss_cls": 0.407882, "loss_da": 0.077598, "loss_dc": 0.070217, "loss_rpn_bbox": 0.683805, "loss_rpn_cls": 0.469636, "lr": 0.001000, "mb_qsize": 64, "mem": 6369, "time": 1.705032}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
WARNING workspace.py: 185: Original python traceback for operator `0` in network `generalized_rcnn` in exception above (most recent call last):
WARNING workspace.py: 190:   File "tools/train_net.py", line 128, in <module>
WARNING workspace.py: 190:   File "tools/train_net.py", line 110, in main
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 53, in train_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 132, in create_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 125, in create
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 90, in generalized_rcnn
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 247, in build_generic_detection_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 40, in build_data_parallel_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 63, in _build_forward_graph
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 171, in _single_gpu_build_func
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 36, in add_ResNet50_conv4_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 99, in add_ResNet_convX_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 252, in basic_bn_stem
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/cnn.py", line 97, in Conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/brew.py", line 107, in scope_wrapper
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 186, in conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 139, in _ConvBase
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.0173969268799 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [4/64]
INFO loader.py: 234:   [6/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [10/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [21/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [24/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [36/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [41/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [56/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 212: Printing model: generalized_rcnn
INFO net.py: 249: data                        : (2, 3, 500, 1000)    => conv1                       : (2, 64, 250, 500)    ------- (op: Conv)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: AffineChannel)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: Relu)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => pool1                       : (2, 64, 125, 250)    ------- (op: MaxPool)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch2c             : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch1              : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch1              : (2, 256, 125, 250)   => res2_0_branch1_bn           : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch1_bn           : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_1_branch2c             : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_2_branch2c             : (2, 256, 125, 250)   => res2_2_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: StopGradient)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2c             : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch1              : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch1              : (2, 512, 63, 125)    => res3_0_branch1_bn           : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch1_bn           : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2c             : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2c             : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2c             : (2, 512, 63, 125)    => res3_3_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch2c             : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch1              : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch1              : (2, 1024, 32, 63)    => res4_0_branch1_bn           : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch1_bn           : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_1_branch2c             : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_2_branch2c             : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_3_branch2c             : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_4_branch2c             : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_5_branch2c             : (2, 1024, 32, 63)    => res4_5_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_cls_logits              : (2, 9, 32, 63)       ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_bbox_pred               : (2, 36, 32, 63)      ------- (op: Conv)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_cls_probs               : (2, 9, 32, 63)       ------- (op: Sigmoid)
INFO net.py: 249: rpn_cls_probs               : (2, 9, 32, 63)       => rpn_rois                    : (3479, 5)            ------- (op: Python:GenerateProposalsOp:rpn_cls_probs,rpn_bbox_pred,im_info)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_rois                    : (3479, 5)            ------|
INFO net.py: 249: im_info                     : (2, 3)               => rpn_rois                    : (3479, 5)            ------|
INFO net.py: 249: rpn_rois                    : (3479, 5)            => rois                        : (512, 5)             ------- (op: Python:GenerateProposalLabelsOp:rpn_rois,roidb,im_info,is_source)
INFO net.py: 249: roidb                       : (173709,)            => rois                        : (512, 5)             ------|
INFO net.py: 249: im_info                     : (2, 3)               => rois                        : (512, 5)             ------|
INFO net.py: 249: is_source                   : (2,)                 => rois                        : (512, 5)             ------|
INFO net.py: 249: rpn_labels_int32_wide       : (2, 9, 84, 84)       => rpn_labels_int32            : (2, 9, 32, 63)       ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_labels_int32            : (2, 9, 32, 63)       ------|
INFO net.py: 249: rpn_bbox_targets_wide       : (2, 36, 84, 84)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_inside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_outside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: rpn_labels_int32            : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------|
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: rpn_bbox_targets            : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_inside_weights     : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_outside_weights    : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => pool5                       : (512, 1024, 14, 14)  ------- (op: RoIAlign)
INFO net.py: 249: rois                        : (512, 5)             => pool5                       : (512, 1024, 14, 14)  ------|
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch2c             : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch1              : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch1              : (512, 2048, 7, 7)    => res5_0_branch1_bn           : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch1_bn           : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_1_branch2c             : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_2_branch2c             : (512, 2048, 7, 7)    => res5_2_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_pool                   : (512, 2048, 1, 1)    ------- (op: AveragePool)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => cls_score                   : (512, 9)             ------- (op: FC)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => bbox_pred                   : (512, 36)            ------- (op: FC)
INFO net.py: 249: cls_score                   : (512, 9)             => cls_prob                    : (512, 9)             ------- (op: SoftmaxWithLoss)
INFO net.py: 249: labels_int32                : (512,)               => cls_prob                    : (512, 9)             ------|
INFO net.py: 249: bbox_pred                   : (512, 36)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: bbox_targets                : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_inside_weights         : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_outside_weights        : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: cls_prob                    : (512, 9)             => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 249: labels_int32                : (512,)               => accuracy_cls                : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => da_grl                      : (2, 1024, 32, 63)    ------- (op: NegateGradient)
INFO net.py: 249: da_grl                      : (2, 1024, 32, 63)    => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Conv)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Relu)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_2                   : (2, 2, 36, 67)       ------- (op: Conv)
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => loss_da                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: da_label                    : (2, 2, 36, 67)       => loss_da                     : ()                   ------|
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => dc_grl                      : (512, 2048, 1, 1)    ------- (op: NegateGradient)
INFO net.py: 249: dc_grl                      : (512, 2048, 1, 1)    => dc_ip1                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip1                      : (512, 1024)          => dc_relu_1                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_1                   : (512, 1024)          => da_drop_1                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_1                   : (512, 1024)          => dc_ip2                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip2                      : (512, 1024)          => dc_relu_2                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_2                   : (512, 1024)          => da_drop_2                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_2                   : (512, 1024)          => dc_ip3                      : (512, 1)             ------- (op: FC)
INFO net.py: 249: dc_ip3                      : (512, 1)             => loss_dc                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: dc_label                    : (512,)               => loss_dc                     : ()                   ------|
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => ll_consistency              : (2, 2, 36, 67)       ------- (op: Python)
INFO net.py: 249: dc_ip3                      : (512, 1)             => ll_consistency              : (2, 2, 36, 67)       ------|
INFO net.py: 253: End of model: generalized_rcnn
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.167969, "eta": "9 days, 7:18:13", "iter": 0, "loss": 4.395918, "loss_bbox": 0.094125, "loss_cls": 2.159220, "loss_da": 0.075988, "loss_dc": 0.070100, "loss_rpn_bbox": 1.273141, "loss_rpn_cls": 0.723345, "lr": 0.001000, "mb_qsize": 64, "mem": 6366, "time": 11.484186}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.889648, "eta": "1 day, 7:25:15", "iter": 20, "loss": 1.944018, "loss_bbox": 0.104641, "loss_cls": 0.443860, "loss_da": 0.075580, "loss_dc": 0.069951, "loss_rpn_bbox": 0.708041, "loss_rpn_cls": 0.488435, "lr": 0.001000, "mb_qsize": 64, "mem": 6369, "time": 1.616402}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.898438, "eta": "22:58:40", "iter": 40, "loss": 1.609160, "loss_bbox": 0.089284, "loss_cls": 0.300427, "loss_da": 0.073111, "loss_dc": 0.070333, "loss_rpn_bbox": 0.649236, "loss_rpn_cls": 0.388740, "lr": 0.001000, "mb_qsize": 64, "mem": 6370, "time": 1.182390}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.911133, "eta": "22:43:23", "iter": 60, "loss": 1.625086, "loss_bbox": 0.125706, "loss_cls": 0.253392, "loss_da": 0.071489, "loss_dc": 0.070173, "loss_rpn_bbox": 0.631780, "loss_rpn_cls": 0.332116, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.169627}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.879883, "eta": "22:36:38", "iter": 80, "loss": 1.556136, "loss_bbox": 0.224750, "loss_cls": 0.317838, "loss_da": 0.071214, "loss_dc": 0.069951, "loss_rpn_bbox": 0.535227, "loss_rpn_cls": 0.342208, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.164167}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.875977, "eta": "22:37:01", "iter": 100, "loss": 1.494545, "loss_bbox": 0.249320, "loss_cls": 0.326687, "loss_da": 0.071535, "loss_dc": 0.070055, "loss_rpn_bbox": 0.447404, "loss_rpn_cls": 0.329884, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.164825}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.884766, "eta": "22:30:29", "iter": 120, "loss": 1.488062, "loss_bbox": 0.220830, "loss_cls": 0.282734, "loss_da": 0.070671, "loss_dc": 0.070294, "loss_rpn_bbox": 0.522689, "loss_rpn_cls": 0.319541, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.159555}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.888672, "eta": "22:28:26", "iter": 140, "loss": 1.520372, "loss_bbox": 0.291028, "loss_cls": 0.290623, "loss_da": 0.072028, "loss_dc": 0.070163, "loss_rpn_bbox": 0.502339, "loss_rpn_cls": 0.266107, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.158119}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.892578, "eta": "22:22:04", "iter": 160, "loss": 1.508433, "loss_bbox": 0.338492, "loss_cls": 0.272223, "loss_da": 0.070496, "loss_dc": 0.069787, "loss_rpn_bbox": 0.475844, "loss_rpn_cls": 0.271796, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.152986}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.875977, "eta": "22:14:47", "iter": 180, "loss": 1.492987, "loss_bbox": 0.323743, "loss_cls": 0.313207, "loss_da": 0.072157, "loss_dc": 0.070798, "loss_rpn_bbox": 0.449501, "loss_rpn_cls": 0.267208, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.147062}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.877930, "eta": "22:03:08", "iter": 200, "loss": 1.578787, "loss_bbox": 0.324153, "loss_cls": 0.331554, "loss_da": 0.071137, "loss_dc": 0.069258, "loss_rpn_bbox": 0.481703, "loss_rpn_cls": 0.255996, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.137375}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.897461, "eta": "21:55:10", "iter": 220, "loss": 1.499764, "loss_bbox": 0.315194, "loss_cls": 0.302083, "loss_da": 0.071598, "loss_dc": 0.069775, "loss_rpn_bbox": 0.459517, "loss_rpn_cls": 0.248852, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.130846}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.887695, "eta": "21:47:32", "iter": 240, "loss": 1.486310, "loss_bbox": 0.333066, "loss_cls": 0.310287, "loss_da": 0.070820, "loss_dc": 0.069940, "loss_rpn_bbox": 0.436504, "loss_rpn_cls": 0.239449, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.124610}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.881836, "eta": "21:41:29", "iter": 260, "loss": 1.398010, "loss_bbox": 0.325555, "loss_cls": 0.309381, "loss_da": 0.072195, "loss_dc": 0.070128, "loss_rpn_bbox": 0.396936, "loss_rpn_cls": 0.244106, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.119728}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.904297, "eta": "21:35:00", "iter": 280, "loss": 1.372605, "loss_bbox": 0.265117, "loss_cls": 0.275019, "loss_da": 0.070548, "loss_dc": 0.069334, "loss_rpn_bbox": 0.425390, "loss_rpn_cls": 0.240101, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.114469}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.886719, "eta": "21:32:21", "iter": 300, "loss": 1.444473, "loss_bbox": 0.318843, "loss_cls": 0.300141, "loss_da": 0.072704, "loss_dc": 0.070596, "loss_rpn_bbox": 0.481907, "loss_rpn_cls": 0.250828, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.112505}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.883789, "eta": "21:27:30", "iter": 320, "loss": 1.400597, "loss_bbox": 0.326386, "loss_cls": 0.292859, "loss_da": 0.071369, "loss_dc": 0.070089, "loss_rpn_bbox": 0.457296, "loss_rpn_cls": 0.236630, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.108650}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.887695, "eta": "21:23:27", "iter": 340, "loss": 1.431572, "loss_bbox": 0.290115, "loss_cls": 0.333794, "loss_da": 0.071974, "loss_dc": 0.069933, "loss_rpn_bbox": 0.420613, "loss_rpn_cls": 0.242146, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.105480}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.888672, "eta": "21:17:09", "iter": 360, "loss": 1.340991, "loss_bbox": 0.331709, "loss_cls": 0.287436, "loss_da": 0.070532, "loss_dc": 0.069686, "loss_rpn_bbox": 0.336045, "loss_rpn_cls": 0.240798, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.100370}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.881836, "eta": "21:11:00", "iter": 380, "loss": 1.425309, "loss_bbox": 0.319714, "loss_cls": 0.305981, "loss_da": 0.072027, "loss_dc": 0.070147, "loss_rpn_bbox": 0.435305, "loss_rpn_cls": 0.230272, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.095389}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.906250, "eta": "21:06:46", "iter": 400, "loss": 1.342614, "loss_bbox": 0.319584, "loss_cls": 0.271423, "loss_da": 0.070955, "loss_dc": 0.069710, "loss_rpn_bbox": 0.372977, "loss_rpn_cls": 0.249109, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.092044}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "21:02:23", "iter": 420, "loss": 1.255021, "loss_bbox": 0.311443, "loss_cls": 0.240985, "loss_da": 0.071399, "loss_dc": 0.070325, "loss_rpn_bbox": 0.345520, "loss_rpn_cls": 0.215853, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.088588}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.890625, "eta": "20:58:22", "iter": 440, "loss": 1.470164, "loss_bbox": 0.309683, "loss_cls": 0.286043, "loss_da": 0.071717, "loss_dc": 0.070352, "loss_rpn_bbox": 0.420316, "loss_rpn_cls": 0.247214, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.085431}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.892578, "eta": "20:54:45", "iter": 460, "loss": 1.335425, "loss_bbox": 0.293225, "loss_cls": 0.300567, "loss_da": 0.071213, "loss_dc": 0.069706, "loss_rpn_bbox": 0.394132, "loss_rpn_cls": 0.208006, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.082619}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.880859, "eta": "20:51:33", "iter": 480, "loss": 1.401742, "loss_bbox": 0.328443, "loss_cls": 0.295809, "loss_da": 0.071010, "loss_dc": 0.070156, "loss_rpn_bbox": 0.404624, "loss_rpn_cls": 0.231129, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.080175}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.907227, "eta": "20:48:14", "iter": 500, "loss": 1.241724, "loss_bbox": 0.305796, "loss_cls": 0.244570, "loss_da": 0.071521, "loss_dc": 0.070033, "loss_rpn_bbox": 0.330617, "loss_rpn_cls": 0.223595, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.077621}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.891602, "eta": "20:45:47", "iter": 520, "loss": 1.384918, "loss_bbox": 0.332464, "loss_cls": 0.276545, "loss_da": 0.071167, "loss_dc": 0.070085, "loss_rpn_bbox": 0.363279, "loss_rpn_cls": 0.212974, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.075807}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.904297, "eta": "20:42:17", "iter": 540, "loss": 1.292600, "loss_bbox": 0.279815, "loss_cls": 0.265407, "loss_da": 0.071951, "loss_dc": 0.069950, "loss_rpn_bbox": 0.400511, "loss_rpn_cls": 0.233901, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.073098}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.905273, "eta": "20:40:49", "iter": 560, "loss": 1.321743, "loss_bbox": 0.297227, "loss_cls": 0.260653, "loss_da": 0.071502, "loss_dc": 0.070197, "loss_rpn_bbox": 0.381245, "loss_rpn_cls": 0.242750, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.072142}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.900391, "eta": "20:39:20", "iter": 580, "loss": 1.293091, "loss_bbox": 0.290120, "loss_cls": 0.264150, "loss_da": 0.071935, "loss_dc": 0.069605, "loss_rpn_bbox": 0.342014, "loss_rpn_cls": 0.222138, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.071167}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.914062, "eta": "20:38:35", "iter": 600, "loss": 1.252636, "loss_bbox": 0.291348, "loss_cls": 0.223114, "loss_da": 0.071577, "loss_dc": 0.069774, "loss_rpn_bbox": 0.344479, "loss_rpn_cls": 0.214605, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.070824}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.901367, "eta": "20:37:02", "iter": 620, "loss": 1.251432, "loss_bbox": 0.310009, "loss_cls": 0.273376, "loss_da": 0.070778, "loss_dc": 0.070046, "loss_rpn_bbox": 0.329123, "loss_rpn_cls": 0.205146, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.069795}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.913086, "eta": "20:34:56", "iter": 640, "loss": 1.223609, "loss_bbox": 0.290616, "loss_cls": 0.240778, "loss_da": 0.071357, "loss_dc": 0.069887, "loss_rpn_bbox": 0.356040, "loss_rpn_cls": 0.214076, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.068295}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.888672, "eta": "20:33:38", "iter": 660, "loss": 1.312738, "loss_bbox": 0.303793, "loss_cls": 0.274702, "loss_da": 0.071756, "loss_dc": 0.069516, "loss_rpn_bbox": 0.393189, "loss_rpn_cls": 0.202631, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.067475}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.905273, "eta": "20:32:17", "iter": 680, "loss": 1.324375, "loss_bbox": 0.281446, "loss_cls": 0.250869, "loss_da": 0.072355, "loss_dc": 0.070324, "loss_rpn_bbox": 0.378698, "loss_rpn_cls": 0.202496, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.066615}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.888672, "eta": "20:31:07", "iter": 700, "loss": 1.332432, "loss_bbox": 0.304721, "loss_cls": 0.303691, "loss_da": 0.071804, "loss_dc": 0.069914, "loss_rpn_bbox": 0.352898, "loss_rpn_cls": 0.188471, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.065911}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.905273, "eta": "20:29:34", "iter": 720, "loss": 1.249310, "loss_bbox": 0.284600, "loss_cls": 0.257860, "loss_da": 0.071519, "loss_dc": 0.069543, "loss_rpn_bbox": 0.342250, "loss_rpn_cls": 0.209695, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.064868}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.897461, "eta": "20:27:48", "iter": 740, "loss": 1.256393, "loss_bbox": 0.289208, "loss_cls": 0.251148, "loss_da": 0.071534, "loss_dc": 0.069224, "loss_rpn_bbox": 0.323159, "loss_rpn_cls": 0.212194, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.063646}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.919922, "eta": "20:25:54", "iter": 760, "loss": 1.183324, "loss_bbox": 0.226115, "loss_cls": 0.220863, "loss_da": 0.071537, "loss_dc": 0.069707, "loss_rpn_bbox": 0.354970, "loss_rpn_cls": 0.214434, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.062307}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.899414, "eta": "20:24:17", "iter": 780, "loss": 1.281826, "loss_bbox": 0.276626, "loss_cls": 0.270331, "loss_da": 0.071487, "loss_dc": 0.069824, "loss_rpn_bbox": 0.380571, "loss_rpn_cls": 0.221237, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.061213}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.909180, "eta": "20:22:20", "iter": 800, "loss": 1.214975, "loss_bbox": 0.303057, "loss_cls": 0.236052, "loss_da": 0.071388, "loss_dc": 0.069426, "loss_rpn_bbox": 0.377633, "loss_rpn_cls": 0.215993, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.059828}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.908203, "eta": "20:20:42", "iter": 820, "loss": 1.183515, "loss_bbox": 0.275083, "loss_cls": 0.237819, "loss_da": 0.071032, "loss_dc": 0.070221, "loss_rpn_bbox": 0.330651, "loss_rpn_cls": 0.216635, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.058719}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.892578, "eta": "20:19:16", "iter": 840, "loss": 1.268792, "loss_bbox": 0.276720, "loss_cls": 0.279235, "loss_da": 0.072046, "loss_dc": 0.070163, "loss_rpn_bbox": 0.327035, "loss_rpn_cls": 0.212219, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.057784}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.901367, "eta": "20:17:57", "iter": 860, "loss": 1.212005, "loss_bbox": 0.286700, "loss_cls": 0.244398, "loss_da": 0.072051, "loss_dc": 0.070062, "loss_rpn_bbox": 0.305670, "loss_rpn_cls": 0.204020, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.056956}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.912109, "eta": "20:17:27", "iter": 880, "loss": 1.190601, "loss_bbox": 0.251596, "loss_cls": 0.249676, "loss_da": 0.071318, "loss_dc": 0.069989, "loss_rpn_bbox": 0.353630, "loss_rpn_cls": 0.199677, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.056824}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.913086, "eta": "20:16:33", "iter": 900, "loss": 1.268510, "loss_bbox": 0.282016, "loss_cls": 0.245320, "loss_da": 0.071667, "loss_dc": 0.070448, "loss_rpn_bbox": 0.376459, "loss_rpn_cls": 0.215170, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.056344}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.912109, "eta": "20:15:34", "iter": 920, "loss": 1.176202, "loss_bbox": 0.266075, "loss_cls": 0.236709, "loss_da": 0.071042, "loss_dc": 0.070120, "loss_rpn_bbox": 0.353353, "loss_rpn_cls": 0.202189, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.055794}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.919922, "eta": "20:14:33", "iter": 940, "loss": 1.132107, "loss_bbox": 0.284565, "loss_cls": 0.215796, "loss_da": 0.071890, "loss_dc": 0.069632, "loss_rpn_bbox": 0.297597, "loss_rpn_cls": 0.206692, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.055217}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.911133, "eta": "20:13:27", "iter": 960, "loss": 1.202711, "loss_bbox": 0.269559, "loss_cls": 0.233383, "loss_da": 0.071507, "loss_dc": 0.069849, "loss_rpn_bbox": 0.329951, "loss_rpn_cls": 0.192635, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.054565}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.904297, "eta": "20:12:16", "iter": 980, "loss": 1.203536, "loss_bbox": 0.258958, "loss_cls": 0.261789, "loss_da": 0.071585, "loss_dc": 0.070134, "loss_rpn_bbox": 0.305395, "loss_rpn_cls": 0.211813, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.053846}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.893555, "eta": "20:10:52", "iter": 1000, "loss": 1.267734, "loss_bbox": 0.301121, "loss_cls": 0.253731, "loss_da": 0.071230, "loss_dc": 0.069429, "loss_rpn_bbox": 0.343144, "loss_rpn_cls": 0.215026, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.052931}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.899414, "eta": "20:09:26", "iter": 1020, "loss": 1.203430, "loss_bbox": 0.276350, "loss_cls": 0.257296, "loss_da": 0.071540, "loss_dc": 0.070354, "loss_rpn_bbox": 0.320616, "loss_rpn_cls": 0.197409, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.051994}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.929688, "eta": "20:08:35", "iter": 1040, "loss": 1.089458, "loss_bbox": 0.227568, "loss_cls": 0.200640, "loss_da": 0.071910, "loss_dc": 0.070340, "loss_rpn_bbox": 0.301702, "loss_rpn_cls": 0.196979, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.051552}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.909180, "eta": "20:07:07", "iter": 1060, "loss": 1.224166, "loss_bbox": 0.242111, "loss_cls": 0.258967, "loss_da": 0.071801, "loss_dc": 0.069767, "loss_rpn_bbox": 0.391123, "loss_rpn_cls": 0.208741, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.050594}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "20:06:01", "iter": 1080, "loss": 1.054309, "loss_bbox": 0.212541, "loss_cls": 0.212966, "loss_da": 0.070880, "loss_dc": 0.069804, "loss_rpn_bbox": 0.329151, "loss_rpn_cls": 0.199478, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.049939}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916016, "eta": "20:05:07", "iter": 1100, "loss": 1.145537, "loss_bbox": 0.239752, "loss_cls": 0.215079, "loss_da": 0.072127, "loss_dc": 0.069578, "loss_rpn_bbox": 0.357352, "loss_rpn_cls": 0.174577, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.049450}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.913086, "eta": "20:03:50", "iter": 1120, "loss": 1.259796, "loss_bbox": 0.282764, "loss_cls": 0.245442, "loss_da": 0.072088, "loss_dc": 0.071171, "loss_rpn_bbox": 0.360965, "loss_rpn_cls": 0.203120, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.048644}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "20:02:29", "iter": 1140, "loss": 1.179696, "loss_bbox": 0.243555, "loss_cls": 0.228093, "loss_da": 0.072118, "loss_dc": 0.069795, "loss_rpn_bbox": 0.327537, "loss_rpn_cls": 0.189204, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.047772}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.915039, "eta": "20:01:05", "iter": 1160, "loss": 1.169743, "loss_bbox": 0.266160, "loss_cls": 0.235551, "loss_da": 0.071962, "loss_dc": 0.070047, "loss_rpn_bbox": 0.357098, "loss_rpn_cls": 0.195749, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.046852}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916992, "eta": "20:00:43", "iter": 1180, "loss": 1.175943, "loss_bbox": 0.241689, "loss_cls": 0.223240, "loss_da": 0.071632, "loss_dc": 0.070329, "loss_rpn_bbox": 0.356157, "loss_rpn_cls": 0.179287, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.046834}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916016, "eta": "19:59:27", "iter": 1200, "loss": 1.174774, "loss_bbox": 0.261365, "loss_cls": 0.214065, "loss_da": 0.071376, "loss_dc": 0.070020, "loss_rpn_bbox": 0.346174, "loss_rpn_cls": 0.201531, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.046039}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.912109, "eta": "19:58:33", "iter": 1220, "loss": 1.220103, "loss_bbox": 0.286001, "loss_cls": 0.244423, "loss_da": 0.071562, "loss_dc": 0.070445, "loss_rpn_bbox": 0.335826, "loss_rpn_cls": 0.191502, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.045553}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "19:57:15", "iter": 1240, "loss": 1.149869, "loss_bbox": 0.251011, "loss_cls": 0.270257, "loss_da": 0.071387, "loss_dc": 0.070166, "loss_rpn_bbox": 0.300844, "loss_rpn_cls": 0.203099, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.044732}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.894531, "eta": "19:56:02", "iter": 1260, "loss": 1.191441, "loss_bbox": 0.262959, "loss_cls": 0.289053, "loss_da": 0.071642, "loss_dc": 0.069680, "loss_rpn_bbox": 0.334935, "loss_rpn_cls": 0.200749, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.043966}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.899414, "eta": "19:55:16", "iter": 1280, "loss": 1.296226, "loss_bbox": 0.269884, "loss_cls": 0.274789, "loss_da": 0.071780, "loss_dc": 0.070412, "loss_rpn_bbox": 0.343889, "loss_rpn_cls": 0.234962, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.043610}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.912109, "eta": "19:54:31", "iter": 1300, "loss": 1.122560, "loss_bbox": 0.233092, "loss_cls": 0.213137, "loss_da": 0.071924, "loss_dc": 0.069500, "loss_rpn_bbox": 0.319412, "loss_rpn_cls": 0.199147, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.043254}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.919922, "eta": "19:53:17", "iter": 1320, "loss": 1.079383, "loss_bbox": 0.245200, "loss_cls": 0.194751, "loss_da": 0.072291, "loss_dc": 0.069887, "loss_rpn_bbox": 0.292572, "loss_rpn_cls": 0.185574, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.042484}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.915039, "eta": "19:52:33", "iter": 1340, "loss": 1.113768, "loss_bbox": 0.232720, "loss_cls": 0.218214, "loss_da": 0.071780, "loss_dc": 0.070070, "loss_rpn_bbox": 0.294794, "loss_rpn_cls": 0.189689, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.042139}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.914062, "eta": "19:51:46", "iter": 1360, "loss": 1.095550, "loss_bbox": 0.245516, "loss_cls": 0.224205, "loss_da": 0.071876, "loss_dc": 0.069742, "loss_rpn_bbox": 0.316102, "loss_rpn_cls": 0.190817, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.041762}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.913086, "eta": "19:50:50", "iter": 1380, "loss": 1.227131, "loss_bbox": 0.246147, "loss_cls": 0.231626, "loss_da": 0.071832, "loss_dc": 0.069733, "loss_rpn_bbox": 0.368360, "loss_rpn_cls": 0.202384, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.041247}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916992, "eta": "19:49:52", "iter": 1400, "loss": 1.089877, "loss_bbox": 0.207871, "loss_cls": 0.225251, "loss_da": 0.072270, "loss_dc": 0.069427, "loss_rpn_bbox": 0.338666, "loss_rpn_cls": 0.194066, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.040704}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.913086, "eta": "19:49:06", "iter": 1420, "loss": 1.142888, "loss_bbox": 0.243701, "loss_cls": 0.243615, "loss_da": 0.071795, "loss_dc": 0.069553, "loss_rpn_bbox": 0.361300, "loss_rpn_cls": 0.186910, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.040337}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.925781, "eta": "19:48:04", "iter": 1440, "loss": 1.070735, "loss_bbox": 0.244544, "loss_cls": 0.197491, "loss_da": 0.072820, "loss_dc": 0.070811, "loss_rpn_bbox": 0.280671, "loss_rpn_cls": 0.204616, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.039743}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.924805, "eta": "19:47:23", "iter": 1460, "loss": 1.011536, "loss_bbox": 0.228947, "loss_cls": 0.179152, "loss_da": 0.073658, "loss_dc": 0.070692, "loss_rpn_bbox": 0.289739, "loss_rpn_cls": 0.193949, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.039448}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.923828, "eta": "19:47:04", "iter": 1480, "loss": 1.086025, "loss_bbox": 0.231484, "loss_cls": 0.207371, "loss_da": 0.073242, "loss_dc": 0.069937, "loss_rpn_bbox": 0.361680, "loss_rpn_cls": 0.179657, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.039470}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.920898, "eta": "19:46:11", "iter": 1500, "loss": 1.071568, "loss_bbox": 0.206870, "loss_cls": 0.201030, "loss_da": 0.072351, "loss_dc": 0.070195, "loss_rpn_bbox": 0.297199, "loss_rpn_cls": 0.172312, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.038999}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.904297, "eta": "19:45:32", "iter": 1520, "loss": 1.134059, "loss_bbox": 0.250656, "loss_cls": 0.227470, "loss_da": 0.072411, "loss_dc": 0.069427, "loss_rpn_bbox": 0.312100, "loss_rpn_cls": 0.204409, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.038728}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916992, "eta": "19:44:26", "iter": 1540, "loss": 1.072282, "loss_bbox": 0.245600, "loss_cls": 0.207279, "loss_da": 0.071886, "loss_dc": 0.069841, "loss_rpn_bbox": 0.291500, "loss_rpn_cls": 0.183132, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.038077}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.920898, "eta": "19:43:49", "iter": 1560, "loss": 1.094225, "loss_bbox": 0.230941, "loss_cls": 0.214635, "loss_da": 0.072212, "loss_dc": 0.069989, "loss_rpn_bbox": 0.311935, "loss_rpn_cls": 0.198112, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.037831}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.923828, "eta": "19:42:59", "iter": 1580, "loss": 1.090313, "loss_bbox": 0.203100, "loss_cls": 0.202697, "loss_da": 0.072829, "loss_dc": 0.070226, "loss_rpn_bbox": 0.311759, "loss_rpn_cls": 0.199034, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.037413}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "19:42:05", "iter": 1600, "loss": 1.142195, "loss_bbox": 0.232972, "loss_cls": 0.229156, "loss_da": 0.072498, "loss_dc": 0.069990, "loss_rpn_bbox": 0.306482, "loss_rpn_cls": 0.194134, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.036921}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.922852, "eta": "19:41:06", "iter": 1620, "loss": 1.087389, "loss_bbox": 0.224157, "loss_cls": 0.233583, "loss_da": 0.072465, "loss_dc": 0.069758, "loss_rpn_bbox": 0.293149, "loss_rpn_cls": 0.172176, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.036365}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.917969, "eta": "19:40:33", "iter": 1640, "loss": 1.084659, "loss_bbox": 0.227569, "loss_cls": 0.211416, "loss_da": 0.072690, "loss_dc": 0.070368, "loss_rpn_bbox": 0.310502, "loss_rpn_cls": 0.192932, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.036179}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.927734, "eta": "19:39:44", "iter": 1660, "loss": 0.999457, "loss_bbox": 0.215296, "loss_cls": 0.193511, "loss_da": 0.072617, "loss_dc": 0.069782, "loss_rpn_bbox": 0.263324, "loss_rpn_cls": 0.171504, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.035774}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.924805, "eta": "19:38:56", "iter": 1680, "loss": 1.111548, "loss_bbox": 0.224715, "loss_cls": 0.209717, "loss_da": 0.072292, "loss_dc": 0.069801, "loss_rpn_bbox": 0.344276, "loss_rpn_cls": 0.179695, "lr": 0.001000, "mb_qsize": 64, "mem": 6375, "time": 1.035368}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.922852, "eta": "19:38:16", "iter": 1700, "loss": 1.137652, "loss_bbox": 0.257385, "loss_cls": 0.222172, "loss_da": 0.071795, "loss_dc": 0.069215, "loss_rpn_bbox": 0.328857, "loss_rpn_cls": 0.185820, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.035082}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.907227, "eta": "19:37:42", "iter": 1720, "loss": 1.152135, "loss_bbox": 0.261219, "loss_cls": 0.268858, "loss_da": 0.074346, "loss_dc": 0.070689, "loss_rpn_bbox": 0.321306, "loss_rpn_cls": 0.207097, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.034890}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.909180, "eta": "19:36:33", "iter": 1740, "loss": 1.183100, "loss_bbox": 0.253070, "loss_cls": 0.257308, "loss_da": 0.072689, "loss_dc": 0.070329, "loss_rpn_bbox": 0.334643, "loss_rpn_cls": 0.197793, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.034188}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.935547, "eta": "19:35:37", "iter": 1760, "loss": 1.006233, "loss_bbox": 0.198531, "loss_cls": 0.174775, "loss_da": 0.072149, "loss_dc": 0.070168, "loss_rpn_bbox": 0.319356, "loss_rpn_cls": 0.193804, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.033663}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.933594, "eta": "19:34:50", "iter": 1780, "loss": 0.993065, "loss_bbox": 0.210024, "loss_cls": 0.185441, "loss_da": 0.072512, "loss_dc": 0.070182, "loss_rpn_bbox": 0.305333, "loss_rpn_cls": 0.177639, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.033279}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.921875, "eta": "19:33:55", "iter": 1800, "loss": 1.076450, "loss_bbox": 0.216833, "loss_cls": 0.203967, "loss_da": 0.073047, "loss_dc": 0.070196, "loss_rpn_bbox": 0.293085, "loss_rpn_cls": 0.193382, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.032785}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.932617, "eta": "19:33:21", "iter": 1820, "loss": 1.068317, "loss_bbox": 0.238167, "loss_cls": 0.191877, "loss_da": 0.071993, "loss_dc": 0.069650, "loss_rpn_bbox": 0.287708, "loss_rpn_cls": 0.187525, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.032584}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.922852, "eta": "19:32:35", "iter": 1840, "loss": 1.077798, "loss_bbox": 0.241472, "loss_cls": 0.212595, "loss_da": 0.075271, "loss_dc": 0.070712, "loss_rpn_bbox": 0.276618, "loss_rpn_cls": 0.177518, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.032214}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.925781, "eta": "19:32:00", "iter": 1860, "loss": 1.082071, "loss_bbox": 0.204939, "loss_cls": 0.220762, "loss_da": 0.075958, "loss_dc": 0.069870, "loss_rpn_bbox": 0.349526, "loss_rpn_cls": 0.187614, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.031999}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "19:31:38", "iter": 1880, "loss": 1.059736, "loss_bbox": 0.209322, "loss_cls": 0.212261, "loss_da": 0.073102, "loss_dc": 0.070356, "loss_rpn_bbox": 0.303620, "loss_rpn_cls": 0.174304, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.031976}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.930664, "eta": "19:30:53", "iter": 1900, "loss": 1.118979, "loss_bbox": 0.214755, "loss_cls": 0.202939, "loss_da": 0.073573, "loss_dc": 0.070636, "loss_rpn_bbox": 0.313683, "loss_rpn_cls": 0.178938, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.031628}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.927734, "eta": "19:29:49", "iter": 1920, "loss": 1.028473, "loss_bbox": 0.216373, "loss_cls": 0.193426, "loss_da": 0.073983, "loss_dc": 0.070536, "loss_rpn_bbox": 0.265650, "loss_rpn_cls": 0.184359, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.030979}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916992, "eta": "19:28:45", "iter": 1940, "loss": 1.170396, "loss_bbox": 0.219978, "loss_cls": 0.197228, "loss_da": 0.074276, "loss_dc": 0.070903, "loss_rpn_bbox": 0.355163, "loss_rpn_cls": 0.191566, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.030351}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.917969, "eta": "19:28:06", "iter": 1960, "loss": 1.085843, "loss_bbox": 0.212839, "loss_cls": 0.216112, "loss_da": 0.074464, "loss_dc": 0.070143, "loss_rpn_bbox": 0.337588, "loss_rpn_cls": 0.183561, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.030081}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.927734, "eta": "19:27:24", "iter": 1980, "loss": 1.013172, "loss_bbox": 0.204698, "loss_cls": 0.201019, "loss_da": 0.075197, "loss_dc": 0.071164, "loss_rpn_bbox": 0.275584, "loss_rpn_cls": 0.172354, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.029765}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.927734, "eta": "19:26:44", "iter": 2000, "loss": 1.043084, "loss_bbox": 0.207591, "loss_cls": 0.191894, "loss_da": 0.074094, "loss_dc": 0.070695, "loss_rpn_bbox": 0.314305, "loss_rpn_cls": 0.155683, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.029472}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.926758, "eta": "19:26:08", "iter": 2020, "loss": 1.084535, "loss_bbox": 0.216198, "loss_cls": 0.195121, "loss_da": 0.074404, "loss_dc": 0.071367, "loss_rpn_bbox": 0.286412, "loss_rpn_cls": 0.188709, "lr": 0.001000, "mb_qsize": 64, "mem": 6376, "time": 1.029253}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.926758, "eta": "19:25:31", "iter": 2040, "loss": 1.076884, "loss_bbox": 0.196885, "loss_cls": 0.207836, "loss_da": 0.073702, "loss_dc": 0.070137, "loss_rpn_bbox": 0.311479, "loss_rpn_cls": 0.201045, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029003}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.924805, "eta": "19:24:40", "iter": 2060, "loss": 1.035656, "loss_bbox": 0.206847, "loss_cls": 0.190707, "loss_da": 0.073118, "loss_dc": 0.070769, "loss_rpn_bbox": 0.254983, "loss_rpn_cls": 0.171669, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028564}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.922852, "eta": "19:24:16", "iter": 2080, "loss": 1.082262, "loss_bbox": 0.191428, "loss_cls": 0.216643, "loss_da": 0.074182, "loss_dc": 0.072160, "loss_rpn_bbox": 0.334958, "loss_rpn_cls": 0.183305, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028508}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.917969, "eta": "19:23:47", "iter": 2100, "loss": 1.085482, "loss_bbox": 0.244429, "loss_cls": 0.205879, "loss_da": 0.075811, "loss_dc": 0.072401, "loss_rpn_bbox": 0.308957, "loss_rpn_cls": 0.172405, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028383}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.931641, "eta": "19:23:20", "iter": 2120, "loss": 1.097254, "loss_bbox": 0.192305, "loss_cls": 0.201530, "loss_da": 0.076472, "loss_dc": 0.072598, "loss_rpn_bbox": 0.353948, "loss_rpn_cls": 0.180450, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028287}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.931641, "eta": "19:22:56", "iter": 2140, "loss": 1.032459, "loss_bbox": 0.218713, "loss_cls": 0.176469, "loss_da": 0.077926, "loss_dc": 0.072972, "loss_rpn_bbox": 0.302980, "loss_rpn_cls": 0.169128, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028240}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.920898, "eta": "19:22:38", "iter": 2160, "loss": 1.072734, "loss_bbox": 0.231592, "loss_cls": 0.220389, "loss_da": 0.080860, "loss_dc": 0.071697, "loss_rpn_bbox": 0.296109, "loss_rpn_cls": 0.175742, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028275}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.939453, "eta": "19:22:04", "iter": 2180, "loss": 0.992853, "loss_bbox": 0.160694, "loss_cls": 0.162801, "loss_da": 0.087976, "loss_dc": 0.074154, "loss_rpn_bbox": 0.308988, "loss_rpn_cls": 0.167577, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028085}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.914062, "eta": "19:21:31", "iter": 2200, "loss": 1.088633, "loss_bbox": 0.228806, "loss_cls": 0.217412, "loss_da": 0.091723, "loss_dc": 0.074939, "loss_rpn_bbox": 0.297352, "loss_rpn_cls": 0.171933, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.027893}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.921875, "eta": "19:20:45", "iter": 2220, "loss": 1.081944, "loss_bbox": 0.220696, "loss_cls": 0.223075, "loss_da": 0.093813, "loss_dc": 0.073947, "loss_rpn_bbox": 0.275296, "loss_rpn_cls": 0.188643, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.027529}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.911133, "eta": "19:19:53", "iter": 2240, "loss": 1.105168, "loss_bbox": 0.246101, "loss_cls": 0.224459, "loss_da": 0.104095, "loss_dc": 0.076910, "loss_rpn_bbox": 0.294565, "loss_rpn_cls": 0.165324, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.027052}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.932617, "eta": "19:19:13", "iter": 2260, "loss": 1.051478, "loss_bbox": 0.206710, "loss_cls": 0.187995, "loss_da": 0.103224, "loss_dc": 0.078575, "loss_rpn_bbox": 0.284014, "loss_rpn_cls": 0.174279, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026771}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "19:19:04", "iter": 2280, "loss": 1.165586, "loss_bbox": 0.209305, "loss_cls": 0.212611, "loss_da": 0.134830, "loss_dc": 0.083734, "loss_rpn_bbox": 0.293457, "loss_rpn_cls": 0.169762, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026935}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.922852, "eta": "19:18:38", "iter": 2300, "loss": 1.115293, "loss_bbox": 0.194313, "loss_cls": 0.210085, "loss_da": 0.121511, "loss_dc": 0.088171, "loss_rpn_bbox": 0.302713, "loss_rpn_cls": 0.168415, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026860}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.915039, "eta": "19:18:18", "iter": 2320, "loss": 1.265315, "loss_bbox": 0.244453, "loss_cls": 0.222136, "loss_da": 0.142626, "loss_dc": 0.094769, "loss_rpn_bbox": 0.340334, "loss_rpn_cls": 0.196372, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026870}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.914062, "eta": "19:17:47", "iter": 2340, "loss": 1.192691, "loss_bbox": 0.236600, "loss_cls": 0.228721, "loss_da": 0.099997, "loss_dc": 0.087882, "loss_rpn_bbox": 0.285122, "loss_rpn_cls": 0.198289, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026710}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.896484, "eta": "19:17:17", "iter": 2360, "loss": 4.287359, "loss_bbox": 0.212896, "loss_cls": 0.616649, "loss_da": 0.115136, "loss_dc": 0.095345, "loss_rpn_bbox": 0.910136, "loss_rpn_cls": 0.377388, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.026581}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.915039, "eta": "19:18:18", "iter": 2380, "loss": 1.953707, "loss_bbox": 0.050207, "loss_cls": 0.432376, "loss_da": 0.071141, "loss_dc": 0.074643, "loss_rpn_bbox": 0.811809, "loss_rpn_cls": 0.411222, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.027787}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916992, "eta": "19:18:40", "iter": 2400, "loss": 1.648157, "loss_bbox": 0.059557, "loss_cls": 0.338579, "loss_da": 0.069546, "loss_dc": 0.074323, "loss_rpn_bbox": 0.675510, "loss_rpn_cls": 0.396125, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028404}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.924805, "eta": "19:19:12", "iter": 2420, "loss": 1.537733, "loss_bbox": 0.050113, "loss_cls": 0.302872, "loss_da": 0.070982, "loss_dc": 0.070981, "loss_rpn_bbox": 0.684993, "loss_rpn_cls": 0.337411, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029184}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.902344, "eta": "19:19:26", "iter": 2440, "loss": 1.603699, "loss_bbox": 0.087681, "loss_cls": 0.342194, "loss_da": 0.070644, "loss_dc": 0.070340, "loss_rpn_bbox": 0.684003, "loss_rpn_cls": 0.339611, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029705}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.900391, "eta": "19:19:26", "iter": 2460, "loss": 1.540897, "loss_bbox": 0.107897, "loss_cls": 0.287113, "loss_da": 0.070872, "loss_dc": 0.071915, "loss_rpn_bbox": 0.631878, "loss_rpn_cls": 0.337678, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030007}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.883789, "eta": "19:19:20", "iter": 2480, "loss": 1.672750, "loss_bbox": 0.166247, "loss_cls": 0.373690, "loss_da": 0.070980, "loss_dc": 0.071860, "loss_rpn_bbox": 0.605831, "loss_rpn_cls": 0.311005, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030222}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.870117, "eta": "19:19:19", "iter": 2500, "loss": 1.620460, "loss_bbox": 0.160083, "loss_cls": 0.373415, "loss_da": 0.070186, "loss_dc": 0.069507, "loss_rpn_bbox": 0.603906, "loss_rpn_cls": 0.306870, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030514}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.883789, "eta": "19:19:06", "iter": 2520, "loss": 1.534929, "loss_bbox": 0.168119, "loss_cls": 0.341498, "loss_da": 0.069526, "loss_dc": 0.069551, "loss_rpn_bbox": 0.545685, "loss_rpn_cls": 0.306978, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030625}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.865234, "eta": "19:19:01", "iter": 2540, "loss": 1.621252, "loss_bbox": 0.194677, "loss_cls": 0.396754, "loss_da": 0.069884, "loss_dc": 0.069453, "loss_rpn_bbox": 0.562274, "loss_rpn_cls": 0.307346, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030851}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.880859, "eta": "19:18:47", "iter": 2560, "loss": 1.548414, "loss_bbox": 0.147371, "loss_cls": 0.342821, "loss_da": 0.069943, "loss_dc": 0.069442, "loss_rpn_bbox": 0.607761, "loss_rpn_cls": 0.309025, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030960}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.877930, "eta": "19:18:34", "iter": 2580, "loss": 1.550458, "loss_bbox": 0.173982, "loss_cls": 0.366442, "loss_da": 0.069830, "loss_dc": 0.069049, "loss_rpn_bbox": 0.492625, "loss_rpn_cls": 0.289936, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031072}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.890625, "eta": "19:18:31", "iter": 2600, "loss": 1.685069, "loss_bbox": 0.253588, "loss_cls": 0.354702, "loss_da": 0.069464, "loss_dc": 0.069552, "loss_rpn_bbox": 0.666680, "loss_rpn_cls": 0.304438, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031335}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.838867, "eta": "19:18:14", "iter": 2620, "loss": 1.656513, "loss_bbox": 0.271553, "loss_cls": 0.437655, "loss_da": 0.069882, "loss_dc": 0.069633, "loss_rpn_bbox": 0.558770, "loss_rpn_cls": 0.285678, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031376}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.869141, "eta": "19:18:17", "iter": 2640, "loss": 1.588034, "loss_bbox": 0.233282, "loss_cls": 0.357585, "loss_da": 0.069623, "loss_dc": 0.070106, "loss_rpn_bbox": 0.597308, "loss_rpn_cls": 0.297834, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031738}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.846680, "eta": "19:18:10", "iter": 2660, "loss": 1.586463, "loss_bbox": 0.286663, "loss_cls": 0.399992, "loss_da": 0.070737, "loss_dc": 0.070085, "loss_rpn_bbox": 0.502238, "loss_rpn_cls": 0.257206, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031931}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.852539, "eta": "19:17:52", "iter": 2680, "loss": 1.611816, "loss_bbox": 0.290688, "loss_cls": 0.380036, "loss_da": 0.069928, "loss_dc": 0.070154, "loss_rpn_bbox": 0.513249, "loss_rpn_cls": 0.265740, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031967}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.869141, "eta": "19:17:26", "iter": 2700, "loss": 1.556231, "loss_bbox": 0.257782, "loss_cls": 0.371921, "loss_da": 0.070380, "loss_dc": 0.069912, "loss_rpn_bbox": 0.431834, "loss_rpn_cls": 0.270215, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031888}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.885742, "eta": "19:17:09", "iter": 2720, "loss": 1.550701, "loss_bbox": 0.241727, "loss_cls": 0.313852, "loss_da": 0.070520, "loss_dc": 0.070871, "loss_rpn_bbox": 0.494242, "loss_rpn_cls": 0.251519, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031942}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.864258, "eta": "19:16:37", "iter": 2740, "loss": 1.544327, "loss_bbox": 0.246212, "loss_cls": 0.385988, "loss_da": 0.069840, "loss_dc": 0.070376, "loss_rpn_bbox": 0.497196, "loss_rpn_cls": 0.265550, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031778}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.892578, "eta": "19:16:24", "iter": 2760, "loss": 1.453609, "loss_bbox": 0.199345, "loss_cls": 0.309154, "loss_da": 0.070545, "loss_dc": 0.069919, "loss_rpn_bbox": 0.566785, "loss_rpn_cls": 0.248839, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031896}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "19:16:06", "iter": 2780, "loss": 1.251503, "loss_bbox": 0.222052, "loss_cls": 0.247173, "loss_da": 0.069892, "loss_dc": 0.070238, "loss_rpn_bbox": 0.414164, "loss_rpn_cls": 0.235787, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031936}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.897461, "eta": "19:15:42", "iter": 2800, "loss": 1.371023, "loss_bbox": 0.259375, "loss_cls": 0.302106, "loss_da": 0.070254, "loss_dc": 0.070971, "loss_rpn_bbox": 0.459002, "loss_rpn_cls": 0.235166, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031879}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.896484, "eta": "19:15:16", "iter": 2820, "loss": 1.305671, "loss_bbox": 0.211766, "loss_cls": 0.296096, "loss_da": 0.070540, "loss_dc": 0.070205, "loss_rpn_bbox": 0.414975, "loss_rpn_cls": 0.226871, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031803}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.900391, "eta": "19:14:46", "iter": 2840, "loss": 1.438602, "loss_bbox": 0.255925, "loss_cls": 0.295892, "loss_da": 0.069571, "loss_dc": 0.070254, "loss_rpn_bbox": 0.441668, "loss_rpn_cls": 0.249324, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031662}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "19:14:27", "iter": 2860, "loss": 1.369387, "loss_bbox": 0.206526, "loss_cls": 0.295525, "loss_da": 0.071493, "loss_dc": 0.070274, "loss_rpn_bbox": 0.454534, "loss_rpn_cls": 0.286618, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031691}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.890625, "eta": "19:13:54", "iter": 2880, "loss": 1.391849, "loss_bbox": 0.283494, "loss_cls": 0.298686, "loss_da": 0.070585, "loss_dc": 0.069637, "loss_rpn_bbox": 0.438162, "loss_rpn_cls": 0.249237, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031501}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.895508, "eta": "19:13:14", "iter": 2900, "loss": 1.440144, "loss_bbox": 0.249038, "loss_cls": 0.323326, "loss_da": 0.066592, "loss_dc": 0.076573, "loss_rpn_bbox": 0.461879, "loss_rpn_cls": 0.244895, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031211}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.911133, "eta": "19:12:44", "iter": 2920, "loss": 1.258320, "loss_bbox": 0.214168, "loss_cls": 0.270784, "loss_da": 0.071380, "loss_dc": 0.069575, "loss_rpn_bbox": 0.417141, "loss_rpn_cls": 0.225607, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.031082}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.884766, "eta": "19:11:58", "iter": 2940, "loss": 1.358852, "loss_bbox": 0.237214, "loss_cls": 0.303617, "loss_da": 0.071069, "loss_dc": 0.069666, "loss_rpn_bbox": 0.377837, "loss_rpn_cls": 0.228089, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030689}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.911133, "eta": "19:11:23", "iter": 2960, "loss": 1.309336, "loss_bbox": 0.219229, "loss_cls": 0.256885, "loss_da": 0.070598, "loss_dc": 0.069863, "loss_rpn_bbox": 0.388000, "loss_rpn_cls": 0.232786, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030486}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.904297, "eta": "19:10:45", "iter": 2980, "loss": 1.301650, "loss_bbox": 0.262470, "loss_cls": 0.270782, "loss_da": 0.071588, "loss_dc": 0.069596, "loss_rpn_bbox": 0.389272, "loss_rpn_cls": 0.231244, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.030228}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.905273, "eta": "19:10:07", "iter": 3000, "loss": 1.263491, "loss_bbox": 0.251443, "loss_cls": 0.271352, "loss_da": 0.069316, "loss_dc": 0.070206, "loss_rpn_bbox": 0.370509, "loss_rpn_cls": 0.206117, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029966}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.895508, "eta": "19:09:36", "iter": 3020, "loss": 1.321492, "loss_bbox": 0.215907, "loss_cls": 0.302920, "loss_da": 0.069580, "loss_dc": 0.070349, "loss_rpn_bbox": 0.386402, "loss_rpn_cls": 0.229956, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029805}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.893555, "eta": "19:08:57", "iter": 3040, "loss": 1.287249, "loss_bbox": 0.242761, "loss_cls": 0.296914, "loss_da": 0.069999, "loss_dc": 0.069626, "loss_rpn_bbox": 0.379106, "loss_rpn_cls": 0.215737, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029537}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.892578, "eta": "19:08:15", "iter": 3060, "loss": 1.339998, "loss_bbox": 0.239423, "loss_cls": 0.302435, "loss_da": 0.070600, "loss_dc": 0.069168, "loss_rpn_bbox": 0.396451, "loss_rpn_cls": 0.209141, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029208}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "19:07:41", "iter": 3080, "loss": 1.256150, "loss_bbox": 0.222118, "loss_cls": 0.275380, "loss_da": 0.070499, "loss_dc": 0.069061, "loss_rpn_bbox": 0.389116, "loss_rpn_cls": 0.230167, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.029015}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.920898, "eta": "19:07:12", "iter": 3100, "loss": 1.241729, "loss_bbox": 0.220831, "loss_cls": 0.219908, "loss_da": 0.069900, "loss_dc": 0.069862, "loss_rpn_bbox": 0.392671, "loss_rpn_cls": 0.204206, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028887}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.905273, "eta": "19:06:48", "iter": 3120, "loss": 1.230231, "loss_bbox": 0.222087, "loss_cls": 0.256231, "loss_da": 0.069411, "loss_dc": 0.069418, "loss_rpn_bbox": 0.351697, "loss_rpn_cls": 0.210572, "lr": 0.001000, "mb_qsize": 64, "mem": 6377, "time": 1.028843}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
WARNING workspace.py: 185: Original python traceback for operator `0` in network `generalized_rcnn` in exception above (most recent call last):
WARNING workspace.py: 190:   File "tools/train_net.py", line 128, in <module>
WARNING workspace.py: 190:   File "tools/train_net.py", line 110, in main
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 53, in train_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 132, in create_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 125, in create
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 90, in generalized_rcnn
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 247, in build_generic_detection_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 40, in build_data_parallel_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 63, in _build_forward_graph
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 171, in _single_gpu_build_func
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 36, in add_ResNet50_conv4_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 99, in add_ResNet_convX_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 252, in basic_bn_stem
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/cnn.py", line 97, in Conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/brew.py", line 107, in scope_wrapper
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 186, in conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 139, in _ConvBase
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.0175960063934 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [5/64]
INFO loader.py: 234:   [6/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [9/64]
INFO loader.py: 234:   [10/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [13/64]
INFO loader.py: 234:   [14/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [16/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [21/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [24/64]
INFO loader.py: 234:   [25/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [30/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [36/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [40/64]
INFO loader.py: 234:   [42/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [53/64]
INFO loader.py: 234:   [53/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [56/64]
INFO loader.py: 234:   [57/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [62/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
WARNING workspace.py: 185: Original python traceback for operator `214` in network `generalized_rcnn` in exception above (most recent call last):
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.017991065979 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [6/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [9/64]
INFO loader.py: 234:   [10/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [13/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [16/64]
INFO loader.py: 234:   [16/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [20/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [24/64]
INFO loader.py: 234:   [26/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [30/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [33/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [41/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [50/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [58/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 212: Printing model: generalized_rcnn
INFO net.py: 249: data                        : (2, 3, 500, 1000)    => conv1                       : (2, 64, 250, 500)    ------- (op: Conv)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: AffineChannel)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: Relu)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => pool1                       : (2, 64, 125, 250)    ------- (op: MaxPool)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch2c             : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch1              : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch1              : (2, 256, 125, 250)   => res2_0_branch1_bn           : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch1_bn           : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_1_branch2c             : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_2_branch2c             : (2, 256, 125, 250)   => res2_2_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: StopGradient)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2c             : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch1              : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch1              : (2, 512, 63, 125)    => res3_0_branch1_bn           : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch1_bn           : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2c             : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2c             : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2c             : (2, 512, 63, 125)    => res3_3_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch2c             : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch1              : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch1              : (2, 1024, 32, 63)    => res4_0_branch1_bn           : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch1_bn           : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_1_branch2c             : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_2_branch2c             : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_3_branch2c             : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_4_branch2c             : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_5_branch2c             : (2, 1024, 32, 63)    => res4_5_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_cls_logits              : (2, 9, 32, 63)       ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_bbox_pred               : (2, 36, 32, 63)      ------- (op: Conv)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_cls_probs               : (2, 9, 32, 63)       ------- (op: Sigmoid)
INFO net.py: 249: rpn_cls_probs               : (2, 9, 32, 63)       => rpn_rois                    : (4000, 5)            ------- (op: Python:GenerateProposalsOp:rpn_cls_probs,rpn_bbox_pred,im_info)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_rois                    : (4000, 5)            ------|
INFO net.py: 249: im_info                     : (2, 3)               => rpn_rois                    : (4000, 5)            ------|
INFO net.py: 249: rpn_rois                    : (4000, 5)            => rois                        : (512, 5)             ------- (op: Python:GenerateProposalLabelsOp:rpn_rois,roidb,im_info,is_source)
INFO net.py: 249: roidb                       : (173709,)            => rois                        : (512, 5)             ------|
INFO net.py: 249: im_info                     : (2, 3)               => rois                        : (512, 5)             ------|
INFO net.py: 249: is_source                   : (2,)                 => rois                        : (512, 5)             ------|
INFO net.py: 249: rpn_labels_int32_wide       : (2, 9, 84, 84)       => rpn_labels_int32            : (2, 9, 32, 63)       ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_labels_int32            : (2, 9, 32, 63)       ------|
INFO net.py: 249: rpn_bbox_targets_wide       : (2, 36, 84, 84)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_inside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_outside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: rpn_labels_int32            : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------|
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: rpn_bbox_targets            : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_inside_weights     : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_outside_weights    : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => pool5                       : (512, 1024, 14, 14)  ------- (op: RoIAlign)
INFO net.py: 249: rois                        : (512, 5)             => pool5                       : (512, 1024, 14, 14)  ------|
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch2c             : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch1              : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch1              : (512, 2048, 7, 7)    => res5_0_branch1_bn           : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch1_bn           : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_1_branch2c             : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_2_branch2c             : (512, 2048, 7, 7)    => res5_2_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_pool                   : (512, 2048, 1, 1)    ------- (op: AveragePool)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => cls_score                   : (512, 9)             ------- (op: FC)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => bbox_pred                   : (512, 36)            ------- (op: FC)
INFO net.py: 249: cls_score                   : (512, 9)             => cls_prob                    : (512, 9)             ------- (op: SoftmaxWithLoss)
INFO net.py: 249: labels_int32                : (512,)               => cls_prob                    : (512, 9)             ------|
INFO net.py: 249: bbox_pred                   : (512, 36)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: bbox_targets                : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_inside_weights         : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_outside_weights        : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: cls_prob                    : (512, 9)             => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 249: labels_int32                : (512,)               => accuracy_cls                : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => da_grl                      : (2, 1024, 32, 63)    ------- (op: NegateGradient)
INFO net.py: 249: da_grl                      : (2, 1024, 32, 63)    => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Conv)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Relu)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_2                   : (2, 2, 36, 67)       ------- (op: Conv)
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => loss_da                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: da_label                    : (2, 2, 36, 67)       => loss_da                     : ()                   ------|
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => dc_grl                      : (512, 2048, 1, 1)    ------- (op: NegateGradient)
INFO net.py: 249: dc_grl                      : (512, 2048, 1, 1)    => dc_ip1                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip1                      : (512, 1024)          => dc_relu_1                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_1                   : (512, 1024)          => da_drop_1                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_1                   : (512, 1024)          => dc_ip2                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip2                      : (512, 1024)          => dc_relu_2                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_2                   : (512, 1024)          => da_drop_2                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_2                   : (512, 1024)          => dc_ip3                      : (512, 1)             ------- (op: FC)
INFO net.py: 249: dc_ip3                      : (512, 1)             => loss_dc                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: dc_label                    : (512,)               => loss_dc                     : ()                   ------|
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => ll_consistency              : ()                   ------- (op: Python)
INFO net.py: 249: dc_ip3                      : (512, 1)             => ll_consistency              : ()                   ------|
INFO net.py: 249: is_source                   : (2,)                 => ll_consistency              : ()                   ------|
INFO net.py: 253: End of model: generalized_rcnn
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.117188, "eta": "8 days, 16:02:18", "iter": 0, "loss": 4.276168, "loss_bbox": 0.136951, "loss_cls": 2.240598, "loss_da": 0.074780, "loss_dc": 0.069738, "loss_rpn_bbox": 1.125934, "loss_rpn_cls": 0.628168, "lr": 0.001000, "mb_qsize": 64, "mem": 6366, "time": 10.699118}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
WARNING workspace.py: 185: Original python traceback for operator `0` in network `generalized_rcnn` in exception above (most recent call last):
WARNING workspace.py: 190:   File "tools/train_net.py", line 128, in <module>
WARNING workspace.py: 190:   File "tools/train_net.py", line 110, in main
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 53, in train_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 132, in create_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 125, in create
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 90, in generalized_rcnn
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 247, in build_generic_detection_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 40, in build_data_parallel_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 63, in _build_forward_graph
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 171, in _single_gpu_build_func
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 36, in add_ResNet50_conv4_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 99, in add_ResNet_convX_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 252, in basic_bn_stem
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/cnn.py", line 97, in Conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/brew.py", line 107, in scope_wrapper
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 186, in conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 139, in _ConvBase
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.0169079303741 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [2/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [5/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [8/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [13/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [20/64]
INFO loader.py: 234:   [21/64]
INFO loader.py: 234:   [22/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [25/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [28/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [30/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [32/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [37/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [41/64]
INFO loader.py: 234:   [42/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [50/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [53/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [57/64]
INFO loader.py: 234:   [58/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [62/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 212: Printing model: generalized_rcnn
INFO net.py: 249: data                        : (2, 3, 500, 1000)    => conv1                       : (2, 64, 250, 500)    ------- (op: Conv)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: AffineChannel)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => conv1                       : (2, 64, 250, 500)    ------- (op: Relu)
INFO net.py: 249: conv1                       : (2, 64, 250, 500)    => pool1                       : (2, 64, 125, 250)    ------- (op: MaxPool)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2a             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_0_branch2b             : (2, 64, 125, 250)    => res2_0_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch2c             : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: pool1                       : (2, 64, 125, 250)    => res2_0_branch1              : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_0_branch1              : (2, 256, 125, 250)   => res2_0_branch1_bn           : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch1_bn           : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_0_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2a             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_1_branch2b             : (2, 64, 125, 250)    => res2_1_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_1_branch2c             : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_0_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_1_branch2c_bn          : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2a             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2a             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Conv)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2b             : (2, 64, 125, 250)    ------- (op: Relu)
INFO net.py: 249: res2_2_branch2b             : (2, 64, 125, 250)    => res2_2_branch2c             : (2, 256, 125, 250)   ------- (op: Conv)
INFO net.py: 249: res2_2_branch2c             : (2, 256, 125, 250)   => res2_2_branch2c_bn          : (2, 256, 125, 250)   ------- (op: AffineChannel)
INFO net.py: 249: res2_2_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Sum)
INFO net.py: 249: res2_1_branch2c_bn          : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------|
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: Relu)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res2_2_sum                  : (2, 256, 125, 250)   ------- (op: StopGradient)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2a             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2b             : (2, 128, 63, 125)    => res3_0_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch2c             : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res2_2_sum                  : (2, 256, 125, 250)   => res3_0_branch1              : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_0_branch1              : (2, 512, 63, 125)    => res3_0_branch1_bn           : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch1_bn           : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_0_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2a             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2b             : (2, 128, 63, 125)    => res3_1_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_1_branch2c             : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_0_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_1_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2a             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2b             : (2, 128, 63, 125)    => res3_2_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_2_branch2c             : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_1_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_2_branch2c_bn          : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2a             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2a             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2b             : (2, 128, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_branch2b             : (2, 128, 63, 125)    => res3_3_branch2c             : (2, 512, 63, 125)    ------- (op: Conv)
INFO net.py: 249: res3_3_branch2c             : (2, 512, 63, 125)    => res3_3_branch2c_bn          : (2, 512, 63, 125)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Sum)
INFO net.py: 249: res3_2_branch2c_bn          : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------|
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res3_3_sum                  : (2, 512, 63, 125)    ------- (op: Relu)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2a             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_0_branch2b             : (2, 256, 32, 63)     => res4_0_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch2c             : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res3_3_sum                  : (2, 512, 63, 125)    => res4_0_branch1              : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_0_branch1              : (2, 1024, 32, 63)    => res4_0_branch1_bn           : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch1_bn           : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_0_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2a             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_1_branch2b             : (2, 256, 32, 63)     => res4_1_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_1_branch2c             : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_0_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_1_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2a             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_2_branch2b             : (2, 256, 32, 63)     => res4_2_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_2_branch2c             : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_1_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_2_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2a             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_3_branch2b             : (2, 256, 32, 63)     => res4_3_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_3_branch2c             : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_2_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_3_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2a             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_4_branch2b             : (2, 256, 32, 63)     => res4_4_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_4_branch2c             : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_3_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_4_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2a             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2a             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Conv)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2b             : (2, 256, 32, 63)     ------- (op: Relu)
INFO net.py: 249: res4_5_branch2b             : (2, 256, 32, 63)     => res4_5_branch2c             : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: res4_5_branch2c             : (2, 1024, 32, 63)    => res4_5_branch2c_bn          : (2, 1024, 32, 63)    ------- (op: AffineChannel)
INFO net.py: 249: res4_5_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Sum)
INFO net.py: 249: res4_4_branch2c_bn          : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => res4_5_sum                  : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => conv_rpn                    : (2, 1024, 32, 63)    ------- (op: Relu)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_cls_logits              : (2, 9, 32, 63)       ------- (op: Conv)
INFO net.py: 249: conv_rpn                    : (2, 1024, 32, 63)    => rpn_bbox_pred               : (2, 36, 32, 63)      ------- (op: Conv)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_cls_probs               : (2, 9, 32, 63)       ------- (op: Sigmoid)
INFO net.py: 249: rpn_cls_probs               : (2, 9, 32, 63)       => rpn_rois                    : (3380, 5)            ------- (op: Python:GenerateProposalsOp:rpn_cls_probs,rpn_bbox_pred,im_info)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_rois                    : (3380, 5)            ------|
INFO net.py: 249: im_info                     : (2, 3)               => rpn_rois                    : (3380, 5)            ------|
INFO net.py: 249: rpn_rois                    : (3380, 5)            => rois                        : (512, 5)             ------- (op: Python:GenerateProposalLabelsOp:rpn_rois,roidb,im_info,is_source)
INFO net.py: 249: roidb                       : (173709,)            => rois                        : (512, 5)             ------|
INFO net.py: 249: im_info                     : (2, 3)               => rois                        : (512, 5)             ------|
INFO net.py: 249: is_source                   : (2,)                 => rois                        : (512, 5)             ------|
INFO net.py: 249: rpn_labels_int32_wide       : (2, 9, 84, 84)       => rpn_labels_int32            : (2, 9, 32, 63)       ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => rpn_labels_int32            : (2, 9, 32, 63)       ------|
INFO net.py: 249: rpn_bbox_targets_wide       : (2, 36, 84, 84)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_targets            : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_inside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_inside_weights     : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_bbox_outside_weights_wide: (2, 36, 84, 84)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------- (op: SpatialNarrowAs)
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => rpn_bbox_outside_weights    : (2, 36, 32, 63)      ------|
INFO net.py: 249: rpn_cls_logits              : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: rpn_labels_int32            : (2, 9, 32, 63)       => loss_rpn_cls                : ()                   ------|
INFO net.py: 249: rpn_bbox_pred               : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: rpn_bbox_targets            : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_inside_weights     : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: rpn_bbox_outside_weights    : (2, 36, 32, 63)      => loss_rpn_bbox               : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => pool5                       : (512, 1024, 14, 14)  ------- (op: RoIAlign)
INFO net.py: 249: rois                        : (512, 5)             => pool5                       : (512, 1024, 14, 14)  ------|
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2a             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_0_branch2b             : (512, 512, 7, 7)     => res5_0_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch2c             : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: pool5                       : (512, 1024, 14, 14)  => res5_0_branch1              : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_0_branch1              : (512, 2048, 7, 7)    => res5_0_branch1_bn           : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch1_bn           : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_0_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2a             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_1_branch2b             : (512, 512, 7, 7)     => res5_1_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_1_branch2c             : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_0_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_1_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2a             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2a             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Conv)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2b             : (512, 512, 7, 7)     ------- (op: Relu)
INFO net.py: 249: res5_2_branch2b             : (512, 512, 7, 7)     => res5_2_branch2c             : (512, 2048, 7, 7)    ------- (op: Conv)
INFO net.py: 249: res5_2_branch2c             : (512, 2048, 7, 7)    => res5_2_branch2c_bn          : (512, 2048, 7, 7)    ------- (op: AffineChannel)
INFO net.py: 249: res5_2_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Sum)
INFO net.py: 249: res5_1_branch2c_bn          : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------|
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_2_sum                  : (512, 2048, 7, 7)    ------- (op: Relu)
INFO net.py: 249: res5_2_sum                  : (512, 2048, 7, 7)    => res5_pool                   : (512, 2048, 1, 1)    ------- (op: AveragePool)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => cls_score                   : (512, 9)             ------- (op: FC)
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => bbox_pred                   : (512, 36)            ------- (op: FC)
INFO net.py: 249: cls_score                   : (512, 9)             => cls_prob                    : (512, 9)             ------- (op: SoftmaxWithLoss)
INFO net.py: 249: labels_int32                : (512,)               => cls_prob                    : (512, 9)             ------|
INFO net.py: 249: bbox_pred                   : (512, 36)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 249: bbox_targets                : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_inside_weights         : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: bbox_outside_weights        : (512, 36)            => loss_bbox                   : ()                   ------|
INFO net.py: 249: cls_prob                    : (512, 9)             => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 249: labels_int32                : (512,)               => accuracy_cls                : ()                   ------|
INFO net.py: 249: res4_5_sum                  : (2, 1024, 32, 63)    => da_grl                      : (2, 1024, 32, 63)    ------- (op: NegateGradient)
INFO net.py: 249: da_grl                      : (2, 1024, 32, 63)    => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Conv)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_1                   : (2, 512, 34, 65)     ------- (op: Relu)
INFO net.py: 249: da_conv_1                   : (2, 512, 34, 65)     => da_conv_2                   : (2, 2, 36, 67)       ------- (op: Conv)
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => loss_da                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: da_label                    : (2, 2, 36, 67)       => loss_da                     : ()                   ------|
INFO net.py: 249: res5_pool                   : (512, 2048, 1, 1)    => dc_grl                      : (512, 2048, 1, 1)    ------- (op: NegateGradient)
INFO net.py: 249: dc_grl                      : (512, 2048, 1, 1)    => dc_ip1                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip1                      : (512, 1024)          => dc_relu_1                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_1                   : (512, 1024)          => da_drop_1                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_1                   : (512, 1024)          => dc_ip2                      : (512, 1024)          ------- (op: FC)
INFO net.py: 249: dc_ip2                      : (512, 1024)          => dc_relu_2                   : (512, 1024)          ------- (op: Relu)
INFO net.py: 249: dc_relu_2                   : (512, 1024)          => da_drop_2                   : (512, 1024)          ------- (op: Dropout)
INFO net.py: 249: da_drop_2                   : (512, 1024)          => dc_ip3                      : (512, 1)             ------- (op: FC)
INFO net.py: 249: dc_ip3                      : (512, 1)             => loss_dc                     : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 249: dc_label                    : (512,)               => loss_dc                     : ()                   ------|
INFO net.py: 249: da_conv_2                   : (2, 2, 36, 67)       => sigmoid_da_conv_2           : (2, 2, 36, 67)       ------- (op: Sigmoid)
INFO net.py: 249: dc_ip3                      : (512, 1)             => sigmoid_dc_ip3              : (512, 1)             ------- (op: Sigmoid)
INFO net.py: 249: sigmoid_da_conv_2           : (2, 2, 36, 67)       => ll_consistency              : ()                   ------- (op: Python)
INFO net.py: 249: sigmoid_dc_ip3              : (512, 1)             => ll_consistency              : ()                   ------|
INFO net.py: 249: is_source                   : (2,)                 => ll_consistency              : ()                   ------|
INFO net.py: 253: End of model: generalized_rcnn
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.058594, "eta": "8 days, 15:56:44", "iter": 0, "loss": 4.512079, "loss_bbox": 0.134754, "loss_cls": 2.223185, "loss_da": 0.072909, "loss_dc": 0.070457, "loss_rpn_bbox": 1.332921, "loss_rpn_cls": 0.677852, "lr": 0.001000, "mb_qsize": 64, "mem": 6366, "time": 10.694353}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.879883, "eta": "1 day, 6:10:52", "iter": 20, "loss": 2.002477, "loss_bbox": 0.100299, "loss_cls": 0.409164, "loss_da": 0.072313, "loss_dc": 0.069545, "loss_rpn_bbox": 0.755004, "loss_rpn_cls": 0.493167, "lr": 0.001000, "mb_qsize": 64, "mem": 6370, "time": 1.552625}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.885742, "eta": "21:36:00", "iter": 40, "loss": 1.615848, "loss_bbox": 0.093518, "loss_cls": 0.336023, "loss_da": 0.071617, "loss_dc": 0.070156, "loss_rpn_bbox": 0.657433, "loss_rpn_cls": 0.393245, "lr": 0.001000, "mb_qsize": 64, "mem": 6370, "time": 1.111496}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.912109, "eta": "21:55:34", "iter": 60, "loss": 1.606846, "loss_bbox": 0.141905, "loss_cls": 0.254744, "loss_da": 0.071961, "loss_dc": 0.070266, "loss_rpn_bbox": 0.615186, "loss_rpn_cls": 0.356202, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.128605}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.858398, "eta": "21:42:16", "iter": 80, "loss": 1.642122, "loss_bbox": 0.229671, "loss_cls": 0.373569, "loss_da": 0.070735, "loss_dc": 0.069834, "loss_rpn_bbox": 0.523326, "loss_rpn_cls": 0.358597, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.117508}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.883789, "eta": "21:39:32", "iter": 100, "loss": 1.480936, "loss_bbox": 0.202341, "loss_cls": 0.287962, "loss_da": 0.070824, "loss_dc": 0.070664, "loss_rpn_bbox": 0.505969, "loss_rpn_cls": 0.328036, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.115488}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.879883, "eta": "21:30:15", "iter": 120, "loss": 1.505051, "loss_bbox": 0.247389, "loss_cls": 0.273745, "loss_da": 0.070520, "loss_dc": 0.070367, "loss_rpn_bbox": 0.515057, "loss_rpn_cls": 0.302763, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.107833}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.870117, "eta": "21:23:31", "iter": 140, "loss": 1.543668, "loss_bbox": 0.292608, "loss_cls": 0.304066, "loss_da": 0.071022, "loss_dc": 0.070213, "loss_rpn_bbox": 0.486238, "loss_rpn_cls": 0.270901, "lr": 0.001000, "mb_qsize": 64, "mem": 6371, "time": 1.102366}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.862305, "eta": "21:18:33", "iter": 160, "loss": 1.479309, "loss_bbox": 0.323855, "loss_cls": 0.320670, "loss_da": 0.069771, "loss_dc": 0.069559, "loss_rpn_bbox": 0.425008, "loss_rpn_cls": 0.274856, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.098418}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.879883, "eta": "21:15:57", "iter": 180, "loss": 1.501097, "loss_bbox": 0.318018, "loss_cls": 0.307346, "loss_da": 0.072775, "loss_dc": 0.070717, "loss_rpn_bbox": 0.460453, "loss_rpn_cls": 0.284270, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.096500}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.876953, "eta": "21:13:20", "iter": 200, "loss": 1.480208, "loss_bbox": 0.309731, "loss_cls": 0.329281, "loss_da": 0.071317, "loss_dc": 0.069806, "loss_rpn_bbox": 0.470667, "loss_rpn_cls": 0.241674, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.094560}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.886719, "eta": "21:12:41", "iter": 220, "loss": 1.533212, "loss_bbox": 0.323470, "loss_cls": 0.297625, "loss_da": 0.071232, "loss_dc": 0.070762, "loss_rpn_bbox": 0.511989, "loss_rpn_cls": 0.244638, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.094316}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.895508, "eta": "21:08:58", "iter": 240, "loss": 1.483248, "loss_bbox": 0.333634, "loss_cls": 0.288932, "loss_da": 0.071412, "loss_dc": 0.069880, "loss_rpn_bbox": 0.456308, "loss_rpn_cls": 0.231308, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.091434}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.889648, "eta": "21:06:04", "iter": 260, "loss": 1.371666, "loss_bbox": 0.335620, "loss_cls": 0.281656, "loss_da": 0.072469, "loss_dc": 0.070414, "loss_rpn_bbox": 0.379739, "loss_rpn_cls": 0.243524, "lr": 0.001000, "mb_qsize": 64, "mem": 6372, "time": 1.089254}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.897461, "eta": "21:03:26", "iter": 280, "loss": 1.371924, "loss_bbox": 0.258381, "loss_cls": 0.280233, "loss_da": 0.069843, "loss_dc": 0.069903, "loss_rpn_bbox": 0.442911, "loss_rpn_cls": 0.248589, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.087300}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.889648, "eta": "20:59:06", "iter": 300, "loss": 1.461591, "loss_bbox": 0.321238, "loss_cls": 0.289480, "loss_da": 0.072147, "loss_dc": 0.070545, "loss_rpn_bbox": 0.521743, "loss_rpn_cls": 0.261286, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.083887}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.890625, "eta": "20:56:21", "iter": 320, "loss": 1.387884, "loss_bbox": 0.306333, "loss_cls": 0.308747, "loss_da": 0.071810, "loss_dc": 0.070280, "loss_rpn_bbox": 0.427908, "loss_rpn_cls": 0.226254, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.081826}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.876953, "eta": "20:55:53", "iter": 340, "loss": 1.502939, "loss_bbox": 0.299342, "loss_cls": 0.330845, "loss_da": 0.071799, "loss_dc": 0.069695, "loss_rpn_bbox": 0.405218, "loss_rpn_cls": 0.242511, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.081739}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.875000, "eta": "20:50:06", "iter": 360, "loss": 1.379183, "loss_bbox": 0.347969, "loss_cls": 0.322801, "loss_da": 0.071171, "loss_dc": 0.069741, "loss_rpn_bbox": 0.363641, "loss_rpn_cls": 0.231969, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.077061}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.885742, "eta": "20:45:05", "iter": 380, "loss": 1.413494, "loss_bbox": 0.311223, "loss_cls": 0.322674, "loss_da": 0.073325, "loss_dc": 0.070970, "loss_rpn_bbox": 0.428733, "loss_rpn_cls": 0.215612, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.073043}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "20:40:38", "iter": 400, "loss": 1.324432, "loss_bbox": 0.302170, "loss_cls": 0.254504, "loss_da": 0.070848, "loss_dc": 0.069431, "loss_rpn_bbox": 0.398640, "loss_rpn_cls": 0.229536, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.069526}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.899414, "eta": "20:36:22", "iter": 420, "loss": 1.244563, "loss_bbox": 0.282032, "loss_cls": 0.264725, "loss_da": 0.071538, "loss_dc": 0.070734, "loss_rpn_bbox": 0.343237, "loss_rpn_cls": 0.229676, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.066148}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.889648, "eta": "20:33:00", "iter": 440, "loss": 1.475524, "loss_bbox": 0.292214, "loss_cls": 0.279730, "loss_da": 0.070827, "loss_dc": 0.070029, "loss_rpn_bbox": 0.416626, "loss_rpn_cls": 0.228798, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.063548}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.891602, "eta": "20:30:12", "iter": 460, "loss": 1.371186, "loss_bbox": 0.306511, "loss_cls": 0.302045, "loss_da": 0.070083, "loss_dc": 0.070074, "loss_rpn_bbox": 0.404513, "loss_rpn_cls": 0.209427, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.061442}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.893555, "eta": "20:27:35", "iter": 480, "loss": 1.358777, "loss_bbox": 0.296276, "loss_cls": 0.265173, "loss_da": 0.071373, "loss_dc": 0.070437, "loss_rpn_bbox": 0.393387, "loss_rpn_cls": 0.225567, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.059487}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.916016, "eta": "20:24:59", "iter": 500, "loss": 1.224157, "loss_bbox": 0.291691, "loss_cls": 0.228599, "loss_da": 0.070944, "loss_dc": 0.069845, "loss_rpn_bbox": 0.339774, "loss_rpn_cls": 0.213988, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.057540}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.880859, "eta": "20:22:12", "iter": 520, "loss": 1.405456, "loss_bbox": 0.343895, "loss_cls": 0.324292, "loss_da": 0.071546, "loss_dc": 0.070228, "loss_rpn_bbox": 0.374111, "loss_rpn_cls": 0.235051, "lr": 0.001000, "mb_qsize": 64, "mem": 6373, "time": 1.055452}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.906250, "eta": "20:19:12", "iter": 540, "loss": 1.368790, "loss_bbox": 0.260655, "loss_cls": 0.270079, "loss_da": 0.070700, "loss_dc": 0.069686, "loss_rpn_bbox": 0.473426, "loss_rpn_cls": 0.234878, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.053164}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.896484, "eta": "20:17:07", "iter": 560, "loss": 1.317980, "loss_bbox": 0.274690, "loss_cls": 0.265449, "loss_da": 0.070786, "loss_dc": 0.069757, "loss_rpn_bbox": 0.364633, "loss_rpn_cls": 0.229358, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.051665}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.889648, "eta": "20:14:05", "iter": 580, "loss": 1.333544, "loss_bbox": 0.275777, "loss_cls": 0.294144, "loss_da": 0.070737, "loss_dc": 0.070322, "loss_rpn_bbox": 0.379022, "loss_rpn_cls": 0.210837, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.049340}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.903320, "eta": "20:11:58", "iter": 600, "loss": 1.286210, "loss_bbox": 0.249980, "loss_cls": 0.279429, "loss_da": 0.070573, "loss_dc": 0.070165, "loss_rpn_bbox": 0.352911, "loss_rpn_cls": 0.224139, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.047814}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.918945, "eta": "20:10:03", "iter": 620, "loss": 1.193567, "loss_bbox": 0.297591, "loss_cls": 0.232630, "loss_da": 0.071705, "loss_dc": 0.070135, "loss_rpn_bbox": 0.354952, "loss_rpn_cls": 0.212784, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.046457}
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.919922, "eta": "20:07:38", "iter": 640, "loss": 1.198085, "loss_bbox": 0.275962, "loss_cls": 0.211379, "loss_da": 0.071391, "loss_dc": 0.070582, "loss_rpn_bbox": 0.360841, "loss_rpn_cls": 0.218912, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.044670}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO logging.py:  39: json_stats: {"accuracy_cls": 0.896484, "eta": "20:05:26", "iter": 660, "loss": 1.313878, "loss_bbox": 0.294227, "loss_cls": 0.275660, "loss_da": 0.071566, "loss_dc": 0.069877, "loss_rpn_bbox": 0.375825, "loss_rpn_cls": 0.208668, "lr": 0.001000, "mb_qsize": 64, "mem": 6374, "time": 1.043066}
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
WARNING workspace.py: 185: Original python traceback for operator `0` in network `generalized_rcnn` in exception above (most recent call last):
WARNING workspace.py: 190:   File "tools/train_net.py", line 128, in <module>
WARNING workspace.py: 190:   File "tools/train_net.py", line 110, in main
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 53, in train_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/utils/train.py", line 132, in create_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 125, in create
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 90, in generalized_rcnn
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 247, in build_generic_detection_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 40, in build_data_parallel_model
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/optimizer.py", line 63, in _build_forward_graph
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/model_builder.py", line 171, in _single_gpu_build_func
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 36, in add_ResNet50_conv4_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 99, in add_ResNet_convX_body
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/detectron/detectron/modeling/ResNet.py", line 252, in basic_bn_stem
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/cnn.py", line 97, in Conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/brew.py", line 107, in scope_wrapper
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 186, in conv
WARNING workspace.py: 190:   File "/scratch_net/biwidl103/haowang/anaconda2/lib/python2.7/site-packages/caffe2/python/helpers/conv.py", line 139, in _ConvBase
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 287: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO train_net.py:  95: Called with args:
INFO train_net.py:  96: Namespace(cfg_file='configs/datest_1gpu_e2e_faster_rcnn_R-50-cityscapes.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/scratch_net/biwidl103/haowang/tmp/da/test/'], skip_test=False)
INFO train_net.py: 102: Training with config:
INFO train_net.py: 103: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'ResNet.add_ResNet_roi_conv5_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': False,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': False,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'ResNet.add_ResNet50_conv4_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 9,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/scratch_net/biwidl103/haowang/tmp/da/test/',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/scratch_net/biwidl103/haowang/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 70000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 50000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 0,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0005,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('cityscapes_fine_instanceonly_seg_val',
                       'foggy_cityscapes_fine_instanceonly_seg_val'),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 2000,
          'SCALE': 500,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 256,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': (),
           'DOMAIN_ADAPTATION': True,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (500,),
           'SNAPSHOT_ITERS': 20000,
           'SOURCE_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'TARGET_DATASETS': ('cityscapes_fine_instanceonly_seg_train',),
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train.py: 131: Building model: generalized_rcnn
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING model_helper.py: 461: You are creating an op that the ModelHelper does not recognize: NegateGradient.
WARNING memonger.py:  55: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py:  97: Memonger memory optimization took 0.0185840129852 secs
INFO train.py: 192: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 196: 5930 roidb entries
INFO train.py: 198: Loading dataset: ('cityscapes_fine_instanceonly_seg_train',)
INFO roidb.py:  50: Appending horizontally-flipped training examples...
INFO roidb.py:  52: Loaded dataset: cityscapes_fine_instanceonly_seg_train
INFO roidb.py: 138: Filtered 20 roidb entries: 5950 -> 5930
INFO roidb.py:  70: Computing bounding-box regression targets...
INFO roidb.py:  72: done
INFO train.py: 202: 5930 roidb entries
INFO net.py:  59: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  88: conv_rpn_w not found
INFO net.py:  88: conv_rpn_b not found
INFO net.py:  88: rpn_cls_logits_w not found
INFO net.py:  88: rpn_cls_logits_b not found
INFO net.py:  88: rpn_bbox_pred_w not found
INFO net.py:  88: rpn_bbox_pred_b not found
INFO net.py:  88: cls_score_w not found
INFO net.py:  88: cls_score_b not found
INFO net.py:  88: bbox_pred_w not found
INFO net.py:  88: bbox_pred_b not found
INFO net.py:  88: da_conv_1_w not found
INFO net.py:  88: da_conv_1_b not found
INFO net.py:  88: da_conv_2_w not found
INFO net.py:  88: da_conv_2_b not found
INFO net.py:  88: dc_ip1_w not found
INFO net.py:  88: dc_ip1_b not found
INFO net.py:  88: dc_ip2_w not found
INFO net.py:  88: dc_ip2_b not found
INFO net.py:  88: dc_ip3_w not found
INFO net.py:  88: dc_ip3_b not found
INFO train.py: 170: Outputs saved to: /scratch_net/biwidl103/haowang/tmp/da/test/train/generalized_rcnn
INFO loader.py: 229: Pre-filling mini-batch queue...
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [0/64]
INFO loader.py: 234:   [1/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [3/64]
INFO loader.py: 234:   [5/64]
INFO loader.py: 234:   [6/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [7/64]
INFO loader.py: 234:   [8/64]
INFO loader.py: 234:   [10/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [11/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [12/64]
INFO loader.py: 234:   [14/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [15/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [17/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [19/64]
INFO loader.py: 234:   [20/64]
INFO loader.py: 234:   [22/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [23/64]
INFO loader.py: 234:   [24/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [27/64]
INFO loader.py: 234:   [29/64]
INFO loader.py: 234:   [30/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [31/64]
INFO loader.py: 234:   [33/64]
INFO loader.py: 234:   [34/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [35/64]
INFO loader.py: 234:   [38/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [39/64]
INFO loader.py: 234:   [40/64]
INFO loader.py: 234:   [40/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [43/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [45/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [47/64]
INFO loader.py: 234:   [48/64]
INFO loader.py: 234:   [49/64]
INFO loader.py: 234:   [50/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [51/64]
INFO loader.py: 234:   [52/64]
INFO loader.py: 234:   [53/64]
INFO loader.py: 234:   [54/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [55/64]
INFO loader.py: 234:   [57/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [59/64]
INFO loader.py: 234:   [60/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [61/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO loader.py: 234:   [63/64]
INFO detector.py: 479: Changing learning rate 0.000000 -> 0.001000 at iter 0
WARNING workspace.py: 185: Original python traceback for operator `218` in network `generalized_rcnn` in exception above (most recent call last):
